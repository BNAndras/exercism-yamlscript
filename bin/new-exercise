#!/usr/bin/env bash

set -euo pipefail

main() (
  setup "$@"

  configlet create --practice-exercise="$slug" >/dev/null

  update-config-yaml

  generate-example-program

  generate-stub-program

  generate-test-file

  make-update

  # show-new-exercise
)

setup() {
  [[ $exercise ]] ||
    die "The 'exercise' variable not set"

  slug=$exercise
  clj=.clojure/exercises/practice/$slug
  ys=exercises/practice/$slug
  meta=$ys/.meta
  _slug=${slug//-/_}

  [[ ! -d $ys ]] ||
    die "Directory '$ys' already exists"

  clj_example_file=$clj/.meta/src/example.clj
  ys_example_file=$meta/$slug.ys
  ys_stub_file=$ys/$slug.ys
  # clj_test_file=$clj/test/${_slug}_test.clj
  ys_test_file=$ys/$slug-test.ys
}

update-config-yaml() (
  new_yaml=$(mktemp)
  ys -Y config.json > "$new_yaml"
  new_section=$(
    diff -u config.yaml "$new_yaml" |
      perl -p0e '
        s{(?s:.*)\n(\+\ \ -\ slug.*\n(?:\+.*\n)+)(?s:.*)}{$1};
        s/^\+//mg' || true
  )
  top_section=$(grep -B999 '^tags:' config.yaml | head -n -2)
  bottom_section=$(grep -A999 '^tags:' config.yaml)

  # Update config.yaml:
  (
    cat <<...
$top_section

$new_section

$bottom_section
...
  ) > config.yaml
)

generate-example-program() (
  (
    command generate-stub-program "$slug"
    if [[ -e $clj_example_file ]]; then
      echo
      perl -pe 's/^(.)/# $1/' < "$clj_example_file"
    fi
  ) > "$ys_example_file"
)

generate-stub-program() (
  (
    command generate-stub-program "$slug"
  ) > "$ys_stub_file"
)

generate-test-file() (
  command generate-test-file "$slug" \
    > "$ys_test_file"
)

make-update() (
  touch common/exercise.mk

  make update >/dev/null
)

show-new-exercise() (
  if [[ $(command -v tree) ]]; then
    tree -a "$ys"
  fi
)

warn() (
  echo "$*" >&2
)

die() {
  echo "Error: $*" >&2
  exit 1
}

[[ ${DEBUG-} ]] && set -x

main "$@"
