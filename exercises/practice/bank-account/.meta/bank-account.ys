!yamlscript/v0

# This exercise is a good candidate to practice concurrency, which
# may not be available or possible in the implementing language track.
# It is possible to implement this exercise without concurrency.

account =: atom(nil)

defn reset-test-state():
  reset! account: nil

defn bank-account(operations):
  loop [operation & operations] operations:
    return =: operation
      .operation
      .str('do-' _).V()
      .call(operation)

    if operations.seq():
      then: recur(operations)
      else: return

defn- do-open(o):
  when deref(account):
    die: 'account already open'
  reset! account: 0

defn- do-close(o):
  when-not deref(account):
    die: 'account not open'
  reset! account: nil

defn- do-balance(o):
  balance =: deref(account)
  if-not balance:
    die: 'account not open'
    else: balance

defn- do-deposit(o):
  when-not deref(account):
    die: 'account not open'
  amount =: o.get-amount()
  swap! account +: amount

defn- do-withdraw(o):
  balance =: deref(account)
  when-not balance:
    die: 'account not open'
  amount =: o.get-amount()
  when amount > balance:
    die: 'amount must be less than balance'
  swap! account -: amount

defn- get-amount(o):
  amount =: o.amount
  if amount <= 0:
    die: 'amount must be greater than 0'
    else: amount
